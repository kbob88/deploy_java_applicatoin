def version_geo_build = '1.$BUILD_NUMBER'
pipeline {
    agent any

    tools {
        maven 'maven-3.6.3'
        jdk 'java'
    }
    
    parameters{
        string(name:'database_ip',defaultValue:'0.0.0.0',description:'IP address of PostgreSQL')
        string(name:'webserwer_ip',defaultValue:'0.0.0.0',description:'IP address of Tomcat server')
    }
    stages {
         stage('Clone of the Geocitizen'){
            steps{
                git branch: 'IA-85-denis-manual-deploy-geocitizen', credentialsId: 'github', url: 'git@github.com:DevOpsAcademySS/Geocitizen.git'
            }
        }
        stage('Change ip addreses') {
            steps {
                sh "./scripts/change.sh ${params.database_ip} ${params.webserwer_ip}"
            }
        }
        stage('Build front-end') {
            steps {
                nodejs('node12') {
                sh """
                cd ./front-end
                npm install
                npm audit fix
                npm run build --no-progress --no-color
                """
                }
            }
        }
        stage('Build back-end') {
            steps {
                sh """
                cp -r ./front-end/dist/* ./src/main/webapp/
                ./scripts/dots.sh
                mvn -Dmaven.test.failure.ignore=true install
                """
            }
        }
        stage('Publish in Nexus'){
            steps{
                nexusArtifactUploader artifacts: [[
                    artifactId: 'geo-citizen', 
                    classifier: '',
                    file: 'target/citizen.war',
                    type: 'war']],
                    credentialsId: 'nexus3-creds',
                    groupId: 'com.softserveinc',
                    nexusUrl: '34.107.30.34:8081',
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    repository: 'geocitizen',
                    version: '1.0.${BUILD_NUMBER}'
            }
            post {
                success {
                    echo "Build Geocitizen is success!!!"
                    telegramSend('Jenkins build is Successfull!!! job: $JOB_NAME')
                    script {
                        build job: 'docker_build_and_push',
                        parameters: [string(name: 'version_geo_build',
                        value: String.valueOf(BUILD_NUMBER)),
                        string(name: 'database_ip',
                        value: String.valueOf(database_ip)),
                        string(name: 'webserwer_ip',
                        value: String.valueOf(webserwer_ip))]
                        wait: false
                    }
                }
                failure{
                    echo "Build Geocitizen is fail!"
                    telegramSend('Jenkins build is Fail(((! job: $JOB_NAME')
                }
            }
        }
    }
}